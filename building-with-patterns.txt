https://www.mongodb.com/blog/post/building-with-patterns-a-summary

+ Schema Design Pattern --> I'm designing an application to do X, how do I model the data?
                            How do I structure my schema in MongoDB for my application?

    Designing our application's data schema is very dependent on our data access patterns
        Does application do more reads than writes?
        What data needs to be together when read from the database?
        What performance considerations are there?
        How large are the documents?
        How large they will get?
        How data will grow and scale?

    Schema design --> performance, scalability, simplicity
    Base for all patterns --> Polymorphic pattern

    + Attribute Pattern

        + suited when we have big documents with many similar fields but there is a subset of fields
            that share common characteristics and we want to sort or query on that subset of fields or
        + the fields we need to sort on are only found in a small subset of documents or
        + Both of above conditions are met within the documents

        + For performance reasons, to optimize our search, we would likely need many indexes to account
            for all of the subsets.Creating all of these indexes could reduce performance

        +* In Attribute pattern, we move this subset of information into an array & reduce the indexing needs
            We turn this information into an array of key-value pairs

        +* By using Attribute pattern, we can add organization to our documents for common characteristics
            and account for rare/unpredictable fields.
                Moving to a key/value convention allows for the use of non-deterministic naming & easy addition of qualifiers
                eg:
                    "specs": [
                        { k: "volume", v: "500", u: "ml" },
                        { k: "volume", v: "12", u: "ounces"}
                    ]

    + Bucket Pattern

        + particularly effective when working with IoT, Real-time analytics, Time-series data
        + reduces overall number of documents in a collection
          improves index performance
          simplifies data access by leveraging pre-aggregation

    + Extended Reference Pattern

        + to be implemented when application is experiencing many repetitive JOIN operations
            By identifying fields frequently being accessed, we can maintain them in the main document
            But, Data duplication is a side effect of this schema design pattern

    + Polymorphic pattern

        + the base for all patterns
        + utilized when we have documents that have more similarities than differences.

    + Tree pattern

        + Extended Reference -->-- an example where saving time on JOIN operation is benefit
                                   ```Data that's accessed together should be stored together```
                                    & some data duplication is tolerable

        + If data to be joined is hierarchical
                |--> a solution is, $graphLookup operator to navigate data as graphs
                |--> If we need to do a lot of queries of this hierarchical data structure
                        we want to apply the same rule of storing together data that is accessed together
                        This is where we can use the Tree Pattern

        + Use cases:
            Reporting Hierarchy
            Product catalogs

                Product --> categories --> other categories
                Solid State Drive --> Hard Drives --> Storage --> Computer Parts --> Electronics
                    We can maintain ancestor_categories, parent_category

                + Placing the ancestors in array provides ability to create a multi-key index on those values.
                    + It allows for all descendants of a given category to be easily found.


